{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"lobby\"\n};\nvar _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Lobby\", -1 /* HOISTED */);\nvar _hoisted_3 = {\n  key: 0\n};\nvar _hoisted_4 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Players:\", -1 /* HOISTED */);\nvar _hoisted_5 = {\n  key: 0\n};\nvar _hoisted_6 = {\n  key: 1\n};\nvar _hoisted_7 = {\n  key: 1\n};\nvar _hoisted_8 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Loading lobby...\", -1 /* HOISTED */);\nvar _hoisted_9 = [_hoisted_8];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, $setup.lobby ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"p\", null, \"Logged in as: \" + _toDisplayString($setup.loggedInUserNickname), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Host: \" + _toDisplayString($setup.hostNickname), 1 /* TEXT */), _hoisted_4, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.playerNicknames, function (player, index) {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, _toDisplayString(player), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), $setup.lobby.players.length < 4 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_5, \"Waiting for more players to join...\")) : (_openBlock(), _createElementBlock(\"p\", _hoisted_6, \"Ready to start the game!\")), $setup.showStartButton ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 2,\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $setup.startGame && $setup.startGame.apply($setup, arguments);\n    })\n  }, \"Start Game\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $setup.copyLobbyLink && $setup.copyLobbyLink.apply($setup, arguments);\n    })\n  }, \"Copy Lobby Code\"), _createElementVNode(\"p\", null, \"Show Start Button: \" + _toDisplayString($setup.showStartButton), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Is Host: \" + _toDisplayString($setup.isHost), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Number of Players: \" + _toDisplayString($setup.lobby.players.length), 1 /* TEXT */)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [].concat(_hoisted_9)))]);\n}","map":{"version":3,"names":["_createElementVNode","key","_hoisted_8","_createElementBlock","_hoisted_1","_hoisted_2","$setup","lobby","_hoisted_3","_toDisplayString","loggedInUserNickname","hostNickname","_hoisted_4","_Fragment","_renderList","playerNicknames","player","index","players","length","_hoisted_5","_hoisted_6","showStartButton","onClick","_cache","startGame","apply","arguments","_createCommentVNode","copyLobbyLink","isHost","_hoisted_7","concat","_hoisted_9"],"sources":["F:\\CCT\\2 SEMESTER\\Concurrent_Systems\\CA2\\project-framework\\monster_mayhem\\src\\views\\Lobby.vue"],"sourcesContent":["<!-- src/views/Lobby.vue-->\r\n<!--This is the Lobby page where players can see the lobby details, players, and start the game.-->\r\n\r\n<template>\r\n  <div class=\"lobby\">\r\n    <h1>Lobby</h1>\r\n    <div v-if=\"lobby\">\r\n      <p>Logged in as: {{ loggedInUserNickname }}</p>\r\n      <p>Host: {{ hostNickname }}</p>\r\n      <p>Players:</p>\r\n      <ul>\r\n        <li v-for=\"(player, index) in playerNicknames\" :key=\"index\">\r\n          {{ player }}\r\n        </li>\r\n      </ul>\r\n      <p v-if=\"lobby.players.length < 4\">Waiting for more players to join...</p>\r\n      <p v-else>Ready to start the game!</p>\r\n      <button v-if=\"showStartButton\" @click=\"startGame\">Start Game</button>\r\n      <button @click=\"copyLobbyLink\">Copy Lobby Code</button>\r\n      <p>Show Start Button: {{ showStartButton }}</p>\r\n      <p>Is Host: {{ isHost }}</p>\r\n      <p>Number of Players: {{ lobby.players.length }}</p>\r\n    </div>\r\n    <div v-else>\r\n      <p>Loading lobby...</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onBeforeUnmount } from \"vue\";\r\nimport { useRoute, useRouter } from \"vue-router\";\r\nimport { db } from \"../services/firebaseConfig\";\r\nimport {\r\n  doc,\r\n  onSnapshot,\r\n  arrayUnion,\r\n  updateDoc,\r\n  deleteDoc,\r\n  addDoc,\r\n  collection,\r\n} from \"firebase/firestore\";\r\nimport { initializeApp, getApps } from \"firebase/app\";\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider, onAuthStateChanged } from \"firebase/auth\";\r\nimport { updateLobby, getUserNicknameById } from \"../services/firebaseService\";\r\n\r\nexport default {\r\n  name: \"Lobby\",\r\n  setup() {\r\n    const route = useRoute();\r\n    const router = useRouter();\r\n    const firebaseConfig = {\r\n      apiKey: \"your-api-key\",\r\n      authDomain: \"your-auth-domain\",\r\n      projectId: \"your-project-id\",\r\n      storageBucket: \"your-storage-bucket\",\r\n      messagingSenderId: \"your-messaging-sender-id\",\r\n      appId: \"your-app-id\",\r\n    };\r\n\r\n    const firebaseApp = getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0];\r\n    const auth = getAuth(firebaseApp);\r\n    const provider = new GoogleAuthProvider();\r\n    const lobbyId = route.params.id;\r\n    const lobby = ref(null);\r\n    const isHost = ref(false);\r\n    const hostNickname = ref(\"\");\r\n    const playerNicknames = ref([]);\r\n    const showStartButton = ref(false);\r\n    const loggedInUserNickname = ref(\"\");\r\n    const currentUserUid = ref(\"\");\r\n\r\n    const checkHostStatus = () => {\r\n      if (currentUserUid.value) {\r\n        const lobbyData = lobby.value;\r\n        if (lobbyData) {\r\n          isHost.value = currentUserUid.value === lobbyData.host;\r\n          if (lobbyData.players.length === 4) {\r\n            showStartButton.value = isHost.value;\r\n          } else {\r\n            showStartButton.value = false;\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    const loadLobby = async () => {\r\n      const lobbyRef = doc(db, \"lobbies\", lobbyId);\r\n      onSnapshot(lobbyRef, async (doc) => {\r\n        if (doc.exists()) {\r\n          lobby.value = doc.data();\r\n          checkHostStatus();\r\n\r\n          hostNickname.value = await getUserNicknameById(lobby.value.host);\r\n          playerNicknames.value = await Promise.all(\r\n            lobby.value.players.map((playerId) => getUserNicknameById(playerId))\r\n          );\r\n\r\n          if (currentUserUid.value && !lobby.value.players.includes(currentUserUid.value)) {\r\n            if (lobby.value.players.length < 4) {\r\n              await updateLobby(lobbyId, {\r\n                players: arrayUnion(currentUserUid.value),\r\n              });\r\n              playerNicknames.value.push(await getUserNicknameById(currentUserUid.value));\r\n              checkHostStatus();\r\n            } else {\r\n              alert(\"Lobby is full. Maximum 4 players allowed.\");\r\n            }\r\n          }\r\n        } else {\r\n          alert(\"Lobby does not exist anymore.\");\r\n          router.push(\"/multiplayer-options\");\r\n        }\r\n      });\r\n    };\r\n\r\n    const startGame = async () => {\r\n      try {\r\n        const gameRef = await addDoc(collection(db, \"games\"), {\r\n          host: lobby.value.host,\r\n          players: lobby.value.players,\r\n          state: {}, // Initial game state\r\n          turn: lobby.value.players[0],\r\n        });\r\n\r\n        await updateLobby(lobbyId, {\r\n          status: \"in-game\",\r\n          gameId: gameRef.id,\r\n        });\r\n\r\n        lobby.value.players.forEach(async (playerId) => {\r\n          const playerRef = doc(db, \"users\", playerId);\r\n          await updateDoc(playerRef, {\r\n            currentGame: gameRef.id,\r\n          });\r\n        });\r\n\r\n        setTimeout(() => {\r\n          router.push(`/game/${gameRef.id}`);\r\n        }, 1000);\r\n      } catch (error) {\r\n        console.error(\"Error starting game:\", error);\r\n      }\r\n    };\r\n\r\n    const copyLobbyLink = () => {\r\n      const link = lobbyId;\r\n      navigator.clipboard.writeText(link).then(() => {\r\n        alert(\"Lobby link copied to clipboard\");\r\n      });\r\n    };\r\n\r\n    const handleBeforeUnload = (event) => {\r\n      if (isHost.value) {\r\n        event.preventDefault();\r\n        event.returnValue = \"\";\r\n      }\r\n    };\r\n\r\n    const handleLeaveLobby = async () => {\r\n      if (isHost.value) {\r\n        if (confirm(\"If you leave, the lobby will be deleted. Do you want to proceed?\")) {\r\n          await deleteDoc(doc(db, \"lobbies\", lobbyId));\r\n          router.push(\"/multiplayer-options\");\r\n        }\r\n      } else {\r\n        router.push(\"/multiplayer-options\");\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      signInWithPopup(auth, provider).then(() => {\r\n        onAuthStateChanged(auth, (user) => {\r\n          if (user) {\r\n            currentUserUid.value = user.uid;\r\n            getUserNicknameById(user.uid).then((nickname) => {\r\n              loggedInUserNickname.value = nickname;\r\n            });\r\n            loadLobby();\r\n          }\r\n        });\r\n      }).catch((error) => {\r\n        console.error(\"Error signing in:\", error);\r\n      });\r\n      window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n    });\r\n\r\n    onBeforeUnmount(() => {\r\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n    });\r\n\r\n    return {\r\n      lobby,\r\n      isHost,\r\n      hostNickname,\r\n      playerNicknames,\r\n      showStartButton,\r\n      startGame,\r\n      copyLobbyLink,\r\n      handleLeaveLobby,\r\n      loggedInUserNickname,\r\n      currentUserUid,\r\n    };\r\n  },\r\n  beforeRouteLeave(to, from, next) {\r\n    const isHost = this.currentUserUid && this.currentUserUid.value === this.lobby.host;\r\n\r\n    if (isHost) {\r\n      if (confirm(\"If you leave, the lobby will be deleted. Do you want to proceed?\")) {\r\n        deleteDoc(doc(db, \"lobbies\", this.$route.params.id)).then(() => {\r\n          next();\r\n        });\r\n      } else {\r\n        next(false);\r\n      }\r\n    } else {\r\n      next();\r\n    }\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;EAIO,SAAM;AAAO;8BAChBA,mBAAA,CAAc,YAAV,OAAK;;EALbC,GAAA;AAAA;8BASMD,mBAAA,CAAe,WAAZ,UAAQ;;EATjBC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;8BAwBMD,mBAAA,CAAuB,WAApB,kBAAgB;kBAAnBE,UAAuB,C;;uBApB3BC,mBAAA,CAsBM,OAtBNC,UAsBM,GArBJC,UAAc,EACHC,MAAA,CAAAC,KAAK,I,cAAhBJ,mBAAA,CAgBM,OAtBVK,UAAA,GAOMR,mBAAA,CAA+C,WAA5C,gBAAc,GAAAS,gBAAA,CAAGH,MAAA,CAAAI,oBAAoB,kBACxCV,mBAAA,CAA+B,WAA5B,QAAM,GAAAS,gBAAA,CAAGH,MAAA,CAAAK,YAAY,kBACxBC,UAAe,EACfZ,mBAAA,CAIK,c,kBAHHG,mBAAA,CAEKU,SAAA,QAbbC,WAAA,CAWsCR,MAAA,CAAAS,eAAe,EAXrD,UAWoBC,MAAM,EAAEC,KAAK;yBAAzBd,mBAAA,CAEK;MAF2CF,GAAG,EAAEgB;IAAK,GAAAR,gBAAA,CACrDO,MAAM;oCAGJV,MAAA,CAAAC,KAAK,CAACW,OAAO,CAACC,MAAM,Q,cAA7BhB,mBAAA,CAA0E,KAfhFiB,UAAA,EAeyC,qCAAmC,M,cACtEjB,mBAAA,CAAsC,KAhB5CkB,UAAA,EAgBgB,0BAAwB,IACpBf,MAAA,CAAAgB,eAAe,I,cAA7BnB,mBAAA,CAAqE;IAjB3EF,GAAA;IAiBsCsB,OAAK,EAAAC,MAAA,QAAAA,MAAA;MAAA,OAAElB,MAAA,CAAAmB,SAAA,IAAAnB,MAAA,CAAAmB,SAAA,CAAAC,KAAA,CAAApB,MAAA,EAAAqB,SAAA,CAAS;IAAA;KAAE,YAAU,KAjBlEC,mBAAA,gBAkBM5B,mBAAA,CAAuD;IAA9CuB,OAAK,EAAAC,MAAA,QAAAA,MAAA;MAAA,OAAElB,MAAA,CAAAuB,aAAA,IAAAvB,MAAA,CAAAuB,aAAA,CAAAH,KAAA,CAAApB,MAAA,EAAAqB,SAAA,CAAa;IAAA;KAAE,iBAAe,GAC9C3B,mBAAA,CAA+C,WAA5C,qBAAmB,GAAAS,gBAAA,CAAGH,MAAA,CAAAgB,eAAe,kBACxCtB,mBAAA,CAA4B,WAAzB,WAAS,GAAAS,gBAAA,CAAGH,MAAA,CAAAwB,MAAM,kBACrB9B,mBAAA,CAAoD,WAAjD,qBAAmB,GAAAS,gBAAA,CAAGH,MAAA,CAAAC,KAAK,CAACW,OAAO,CAACC,MAAM,iB,oBAE/ChB,mBAAA,CAEM,OAzBV4B,UAAA,KAAAC,MAAA,CAAAC,UAAA,I","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}