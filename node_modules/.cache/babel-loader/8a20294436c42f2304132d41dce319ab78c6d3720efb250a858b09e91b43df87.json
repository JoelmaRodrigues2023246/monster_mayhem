{"ast":null,"code":"export function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return null;\n}","map":{"version":3,"names":[],"sources":["F:\\CCT\\2 SEMESTER\\Concurrent_Systems\\CA2\\project-framework\\monster_mayhem\\src\\views\\Lobby.vue"],"sourcesContent":["<!-- src/views/Lobby.vue-->\r\n<!--This is the Lobby page where players can see the lobby details, players, and start the game.-->\r\n\r\n<template>\r\n  \r\n  </template>  \r\n\r\n<script>\r\nimport { ref, onMounted, onBeforeUnmount } from \"vue\";\r\nimport { useRoute, useRouter } from \"vue-router\";\r\nimport { db } from \"../services/firebaseConfig\";\r\nimport {\r\n  doc,\r\n  onSnapshot,\r\n  arrayUnion,\r\n  updateDoc,\r\n  deleteDoc,\r\n  addDoc,\r\n  collection,\r\n} from \"firebase/firestore\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { updateLobby, getUserNicknameById } from \"../services/firebaseService\";\r\n\r\nexport default {\r\n  name: \"Lobby\",\r\n  setup() {\r\n    const route = useRoute();\r\n    const router = useRouter();\r\n    const auth = getAuth();\r\n    const lobbyId = route.params.id;\r\n    const lobby = ref(null);\r\n    const isHost = ref(false);\r\n    const hostNickname = ref(\"\");\r\n    const playerNicknames = ref([]);\r\n    const showStartButton = ref(false);\r\n\r\n    const loadLobby = async () => {\r\n      const lobbyRef = doc(db, \"lobbies\", lobbyId);\r\n      onSnapshot(lobbyRef, async (doc) => {\r\n        if (doc.exists()) {\r\n          lobby.value = doc.data(); // Check if the current user is the host\r\n\r\n          isHost.value = auth.currentUser.uid === lobby.value.host; // Fetch nicknames for the host and players\r\n          console.log(\"host\", lobby.value.host); // log the host id\r\n\r\n          hostNickname.value = await getUserNicknameById(lobby.value.host);\r\n          playerNicknames.value = await Promise.all(\r\n            lobby.value.players.map((playerId) => getUserNicknameById(playerId))\r\n          ); // Add the current player to the lobby if not already added\r\n\r\n          if (!lobby.value.players.includes(auth.currentUser.uid)) {\r\n            await updateLobby(lobbyId, {\r\n              players: arrayUnion(auth.currentUser.uid),\r\n            });\r\n          } // Check if ready to start the game\r\n\r\n          showStartButton.value =\r\n            isHost.value && lobby.value.players.length === 4;\r\n            console.log(\"Show Start Button\", showStartButton.value);\r\n            console.log(\"Number of players\", lobby.value.players.length);\r\n        } else {\r\n          alert(\"Lobby does not exist anymore.\");\r\n          router.push(\"/multiplayer-options\");\r\n        }\r\n      });\r\n    };\r\n\r\n    const startGame = async () => {\r\n      try {\r\n        const gameRef = await addDoc(collection(db, \"games\"), {\r\n          host: lobby.value.host,\r\n          players: lobby.value.players,\r\n          state: {}, // Initial game state\r\n          turn: lobby.value.players[0],\r\n        });\r\n        await updateLobby(lobbyId, { status: \"in-game\", gameId: gameRef.id });\r\n        lobby.value.players.forEach(async (playerId) => {\r\n          const playerRef = doc(db, \"users\", playerId);\r\n          await updateDoc(playerRef, { currentGame: gameRef.id });\r\n        });\r\n        setTimeout(() => {\r\n          router.push(`/game/${gameRef.id}`);\r\n        }, 1000);\r\n      } catch (error) {\r\n        console.error(\"Error starting game:\", error);\r\n      }\r\n    };\r\n\r\n    const copyLobbyLink = () => {\r\n      const link = lobbyId;\r\n      navigator.clipboard.writeText(link).then(() => {\r\n        alert(\"Lobby link copied to clipboard\");\r\n      });\r\n    };\r\n\r\n    const handleBeforeUnload = (event) => {\r\n      if (isHost.value) {\r\n        event.preventDefault();\r\n        event.returnValue = \"\";\r\n      }\r\n    };\r\n\r\n    const handleLeaveLobby = async () => {\r\n      if (isHost.value) {\r\n        if (\r\n          confirm(\r\n            \"If you leave, the lobby will be deleted. Do you want to proceed?\"\r\n          )\r\n        ) {\r\n          await deleteDoc(doc(db, \"lobbies\", lobbyId));\r\n          router.push(\"/multiplayer-options\");\r\n        }\r\n      } else {\r\n        router.push(\"/multiplayer-options\");\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      loadLobby();\r\n      window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n    });\r\n\r\n    onBeforeUnmount(() => {\r\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n    });\r\n\r\n    return {\r\n      lobby,\r\n      isHost,\r\n      hostNickname,\r\n      playerNicknames,\r\n      showStartButton,\r\n      startGame,\r\n      copyLobbyLink,\r\n      handleLeaveLobby,\r\n    };\r\n  },\r\n  beforeRouteLeave(to, from, next) {\r\n    const auth = getAuth();\r\n    const isHost = auth.currentUser && auth.currentUser.uid === this.lobby.host;\r\n    if (isHost) {\r\n      if (\r\n        confirm(\r\n          \"If you leave, the lobby will be deleted. Do you want to proceed?\"\r\n        )\r\n      ) {\r\n        deleteDoc(doc(db, \"lobbies\", this.$route.params.id)).then(() => {\r\n          next();\r\n        });\r\n      } else {\r\n        next(false);\r\n      }\r\n    } else {\r\n      next();\r\n    }\r\n  },\r\n};\r\n</script>"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}