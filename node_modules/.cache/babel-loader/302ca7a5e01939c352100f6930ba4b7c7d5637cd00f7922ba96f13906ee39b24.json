{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-3614b62c\"), n = n(), _popScopeId(), n;\n};\nvar _hoisted_1 = {\n  \"class\": \"game\"\n};\nvar _hoisted_2 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"h1\", null, \"Game\", -1 /* HOISTED */);\n});\nvar _hoisted_3 = {\n  key: 0\n};\nvar _hoisted_4 = {\n  \"class\": \"board\"\n};\nvar _hoisted_5 = {\n  \"class\": \"controls\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"p\", null, \"Player: \" + _toDisplayString($setup.currentPlayerNickname), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Current Turn: \" + _toDisplayString($setup.currentTurnNickname), 1 /* TEXT */), $setup.gameData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList(10, function (row) {\n    return _createElementVNode(\"div\", {\n      key: row,\n      \"class\": \"row\"\n    }, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList(10, function (col) {\n      return _createElementVNode(\"div\", {\n        key: col,\n        \"class\": \"cell\"\n      }, _toDisplayString($setup.getMonsterAt(row - 1, col - 1)), 1 /* TEXT */);\n    }), 64 /* STABLE_FRAGMENT */))]);\n  }), 64 /* STABLE_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = function ($event) {\n      return $setup.addMonster('vampire');\n    })\n  }, \"Add Vampire\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = function ($event) {\n      return $setup.addMonster('werewolf');\n    })\n  }, \"Add Werewolf\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = function ($event) {\n      return $setup.addMonster('ghost');\n    })\n  }, \"Add Ghost\")])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementVNode","key","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","$setup","currentPlayerNickname","currentTurnNickname","gameData","_hoisted_3","_hoisted_4","_Fragment","_renderList","row","col","getMonsterAt","_hoisted_5","onClick","_cache","$event","addMonster","_createCommentVNode"],"sources":["F:\\CCT\\2 SEMESTER\\Concurrent_Systems\\CA2\\project-framework\\monster_mayhem\\src\\views\\Game.vue"],"sourcesContent":["<template>\r\n  <div class=\"game\">\r\n    <h1>Game</h1>\r\n    <p>Player: {{ currentPlayerNickname }}</p>\r\n    <p>Current Turn: {{ currentTurnNickname }}</p>\r\n    <div v-if=\"gameData\">\r\n      <div class=\"board\">\r\n        <div v-for=\"row in 10\" :key=\"row\" class=\"row\">\r\n          <div v-for=\"col in 10\" :key=\"col\" class=\"cell\">\r\n            {{ getMonsterAt(row - 1, col - 1) }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"controls\">\r\n        <button @click=\"addMonster('vampire')\">Add Vampire</button>\r\n        <button @click=\"addMonster('werewolf')\">Add Werewolf</button>\r\n        <button @click=\"addMonster('ghost')\">Add Ghost</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport { useRoute } from 'vue-router';\r\nimport { db } from '../services/firebaseConfig';\r\nimport { doc, getDoc, onSnapshot, updateDoc } from 'firebase/firestore';\r\nimport { onAuthStateChanged } from 'firebase/auth';\r\nimport { auth } from '../services/firebaseConfig';\r\n\r\nexport default {\r\n  name: 'Game',\r\n  setup() {\r\n    const route = useRoute();\r\n    const gameId = ref(route.params.id);\r\n    const gameData = ref(null);\r\n    const currentPlayerNickname = ref('');\r\n    const currentTurnNickname = ref('');\r\n    const user = ref(null);\r\n\r\n    const playerColors = {\r\n      player1UID: 'green',\r\n      player2UID: 'red',\r\n      player3UID: 'blue',\r\n      player4UID: 'yellow',\r\n    };\r\n\r\n    const loadGame = async () => {\r\n      const gameRef = doc(db, 'games', gameId.value);\r\n      const gameSnap = await getDoc(gameRef);\r\n      if (gameSnap.exists()) {\r\n        gameData.value = gameSnap.data();\r\n        updateCurrentTurnNickname();\r\n      } else {\r\n        console.error('No such game!');\r\n      }\r\n    };\r\n\r\n    const updateCurrentTurnNickname = async () => {\r\n      if (gameData.value && gameData.value.turn) {\r\n        currentTurnNickname.value = await getNicknameById(gameData.value.turn);\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      loadGame();\r\n      const gameRef = doc(db, 'games', gameId.value);\r\n      onSnapshot(gameRef, (doc) => {\r\n        if (doc.exists()) {\r\n          gameData.value = doc.data();\r\n          console.log(\"Game Data:\", gameData.value);\r\n          console.log(\"Turn:\", gameData.value.turn);\r\n          updateCurrentTurnNickname();\r\n        }\r\n      });\r\n\r\n      onAuthStateChanged(auth, (currentUser) => {\r\n        if (currentUser) {\r\n          user.value = currentUser;\r\n          getNicknameById(currentUser.uid).then((nickname) => {\r\n            currentPlayerNickname.value = nickname;\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    const getNicknameById = async (uid) => {\r\n      const userRef = doc(db, 'users', uid);\r\n      const userSnap = await getDoc(userRef);\r\n      if (userSnap.exists()) {\r\n        return userSnap.data().nickname;\r\n      } else {\r\n        return 'Unknown';\r\n      }\r\n    };\r\n\r\n    const getMonsterAt = (row, col) => {\r\n      if (!gameData.value) return '';\r\n      for (let player in gameData.value.state.playersData) {\r\n        const monsters = gameData.value.state.playersData[player].monsters;\r\n        for (let monster of monsters) {\r\n          if (monster.position[0] === row && monster.position[1] === col) {\r\n            return monster.type.charAt(0).toUpperCase(); // Exibe a inicial do monstro\r\n          }\r\n        }\r\n      }\r\n      return '';\r\n    };\r\n\r\n    const addMonster = async (monsterType) => {\r\n      if (!gameData.value) return;\r\n      const newState = { ...gameData.value.state };\r\n      const currentPlayer = newState.turn;\r\n      if (!newState.playersData[currentPlayer].monsters) {\r\n        newState.playersData[currentPlayer].monsters = [];\r\n      }\r\n      const playerMonsters = newState.playersData[currentPlayer].monsters;\r\n      playerMonsters.push({ type: monsterType, position: getRandomPositionForPlayer(currentPlayer) });\r\n      await updateDoc(doc(db, 'games', gameId.value), { state: newState });\r\n    };\r\n\r\n    const getRandomPositionForPlayer = (playerId) => {\r\n      // Start positions for each player's monsters: how many monsters each player has/where they are placed\r\n      const side = playerId === 'player1UID' ? 0 : playerId === 'player2UID' ? 9 : playerId === 'player3UID' ? [0, 9] : [9, 0];\r\n      if (side === 0 || side === 9) {\r\n        return [side, Math.floor(Math.random() * 10)];\r\n      } else {\r\n        return [Math.floor(Math.random() * 10), side];\r\n      }\r\n    };\r\n\r\n    return {\r\n      gameId,\r\n      gameData,\r\n      currentPlayerNickname,\r\n      currentTurnNickname,\r\n      playerColors,\r\n      getMonsterAt,\r\n      addMonster,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.game {\r\n  text-align: center;\r\n  margin-top: 50px;\r\n}\r\n.board {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 30px);\r\n  grid-template-rows: repeat(10, 30px);\r\n  gap: 1px;\r\n  margin: 20px auto;\r\n}\r\n.cell {\r\n  width: 30px;\r\n  height: 30px;\r\n  border: 1px solid #000;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.controls {\r\n  margin-top: 20px;\r\n}\r\n.controls button {\r\n  margin: 0 5px;\r\n}\r\n</style>\r\n"],"mappings":";;;;;EACO,SAAM;AAAM;;sBACfA,mBAAA,CAAa,YAAT,MAAI;AAAA;;EAFZC,GAAA;AAAA;;EAMW,SAAM;AAAO;;EAOb,SAAM;AAAU;;uBAZzBC,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBJC,UAAa,EACbJ,mBAAA,CAA0C,WAAvC,UAAQ,GAAAK,gBAAA,CAAGC,MAAA,CAAAC,qBAAqB,kBACnCP,mBAAA,CAA8C,WAA3C,gBAAc,GAAAK,gBAAA,CAAGC,MAAA,CAAAE,mBAAmB,kBAC5BF,MAAA,CAAAG,QAAQ,I,cAAnBP,mBAAA,CAaM,OAlBVQ,UAAA,GAMMV,mBAAA,CAMM,OANNW,UAMM,I,cALJT,mBAAA,CAIMU,SAAA,QAXdC,WAAA,CAO2B,EAAE,EAP7B,UAOoBC,GAAG;WAAfd,mBAAA,CAIM;MAJkBC,GAAG,EAAEa,GAAG;MAAE,SAAM;uBACtCZ,mBAAA,CAEMU,SAAA,QAVhBC,WAAA,CAQ6B,EAAE,EAR/B,UAQsBE,GAAG;aAAff,mBAAA,CAEM;QAFkBC,GAAG,EAAEc,GAAG;QAAE,SAAM;0BACnCT,MAAA,CAAAU,YAAY,CAACF,GAAG,MAAMC,GAAG;;oCAIlCf,mBAAA,CAIM,OAJNiB,UAIM,GAHJjB,mBAAA,CAA2D;IAAlDkB,OAAK,EAAAC,MAAA,QAAAA,MAAA,gBAAAC,MAAA;MAAA,OAAEd,MAAA,CAAAe,UAAU;IAAA;KAAa,aAAW,GAClDrB,mBAAA,CAA6D;IAApDkB,OAAK,EAAAC,MAAA,QAAAA,MAAA,gBAAAC,MAAA;MAAA,OAAEd,MAAA,CAAAe,UAAU;IAAA;KAAc,cAAY,GACpDrB,mBAAA,CAAuD;IAA9CkB,OAAK,EAAAC,MAAA,QAAAA,MAAA,gBAAAC,MAAA;MAAA,OAAEd,MAAA,CAAAe,UAAU;IAAA;KAAW,WAAS,E,OAhBtDC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}