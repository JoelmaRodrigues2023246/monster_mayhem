{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-14bdd4f8\"), n = n(), _popScopeId(), n;\n};\nvar _hoisted_1 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $setup.handleAddMonster && $setup.handleAddMonster.apply($setup, arguments);\n    })\n  }, \"Add Random Monster\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.monsters, function (monster, index) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_createElementVNode(\"button\", {\n      onClick: function onClick($event) {\n        return $setup.handleMoveMonster(index);\n      }\n    }, \"Move Monster \" + _toDisplayString(index + 1), 9 /* TEXT, PROPS */, _hoisted_1)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","onClick","_cache","$setup","handleAddMonster","apply","arguments","_Fragment","_renderList","monsters","monster","index","key","$event","handleMoveMonster","_toDisplayString","_hoisted_1"],"sources":["F:\\CCT\\2 SEMESTER\\Concurrent_Systems\\CA2\\project-framework\\monster_mayhem\\src\\components\\GameControls.vue"],"sourcesContent":["<template>\n  <div>\n    <button @click=\"handleAddMonster\">Add Random Monster</button>\n    <div v-for=\"(monster, index) in monsters\" :key=\"index\">\n      <button @click=\"handleMoveMonster(index)\">Move Monster {{ index + 1 }}</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useGameState } from '../context/GameContext'\n\nexport default {\n  name: 'GameControls',\n  setup() {\n    const { gameState, setGameState } = useGameState()\n    const { monsters } = gameState\n\n    const handleAddMonster = () => {\n      const newMonster = { /* detalhes do monstro */ }\n      setGameState(prevState => ({\n        ...prevState,\n        monsters: [...prevState.monsters, newMonster]\n      }))\n    }\n\n    const handleMoveMonster = (index) => {\n      const newPosition = [/* Nova posição lógica aqui */]\n      setGameState(prevState => {\n        const updatedMonsters = [...prevState.monsters]\n        updatedMonsters[index] = { ...updatedMonsters[index], position: newPosition }\n        return { ...prevState, monsters: updatedMonsters }\n      })\n    }\n\n    return { handleAddMonster, handleMoveMonster, monsters }\n  }\n}\n</script>\n\n<style scoped>\n/* Estilos para os controles do jogo */\n</style>\n"],"mappings":";;;;iBAAA;;uBACEA,mBAAA,CAKM,cAJJC,mBAAA,CAA6D;IAApDC,OAAK,EAAAC,MAAA,QAAAA,MAAA;MAAA,OAAEC,MAAA,CAAAC,gBAAA,IAAAD,MAAA,CAAAC,gBAAA,CAAAC,KAAA,CAAAF,MAAA,EAAAG,SAAA,CAAgB;IAAA;KAAE,oBAAkB,I,kBACpDP,mBAAA,CAEMQ,SAAA,QALVC,WAAA,CAGoCL,MAAA,CAAAM,QAAQ,EAH5C,UAGiBC,OAAO,EAAEC,KAAK;yBAA3BZ,mBAAA,CAEM;MAFqCa,GAAG,EAAED;IAAK,IACnDX,mBAAA,CAA+E;MAAtEC,OAAK,WAAAA,QAAAY,MAAA;QAAA,OAAEV,MAAA,CAAAW,iBAAiB,CAACH,KAAK;MAAA;OAAG,eAAa,GAAAI,gBAAA,CAAGJ,KAAK,4BAJrEK,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}