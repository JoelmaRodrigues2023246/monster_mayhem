{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-3614b62c\"), n = n(), _popScopeId(), n;\n};\nvar _hoisted_1 = {\n  \"class\": \"game\"\n};\nvar _hoisted_2 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"h1\", null, \"Game\", -1 /* HOISTED */);\n});\nvar _hoisted_3 = {\n  key: 0\n};\nvar _hoisted_4 = {\n  \"class\": \"board\"\n};\nvar _hoisted_5 = [\"data-row\", \"data-col\", \"onClick\"];\nvar _hoisted_6 = {\n  \"class\": \"controls\"\n};\nvar _hoisted_7 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"p\", null, \"Player: \" + _toDisplayString($setup.currentPlayerNickname), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Current Turn: \" + _toDisplayString($setup.currentTurnNickname), 1 /* TEXT */), $setup.gameData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList(10, function (row) {\n    return _createElementVNode(\"div\", {\n      key: row,\n      \"class\": \"row\"\n    }, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList(10, function (col) {\n      return _createElementVNode(\"div\", {\n        key: col,\n        \"class\": \"cell\",\n        \"data-row\": row - 1,\n        \"data-col\": col - 1,\n        onClick: function onClick($event) {\n          return $setup.selectCell(row - 1, col - 1);\n        }\n      }, _toDisplayString($setup.getMonsterAt(row - 1, col - 1)), 9 /* TEXT, PROPS */, _hoisted_5);\n    }), 64 /* STABLE_FRAGMENT */))]);\n  }), 64 /* STABLE_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = function ($event) {\n      return $setup.prepareAddMonster('vampire');\n    })\n  }, \"Add Vampire\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = function ($event) {\n      return $setup.prepareAddMonster('werewolf');\n    })\n  }, \"Add Werewolf\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = function ($event) {\n      return $setup.prepareAddMonster('ghost');\n    })\n  }, \"Add Ghost\"), _createElementVNode(\"button\", {\n    id: \"endTurnButton\",\n    onClick: _cache[3] || (_cache[3] = function () {\n      return $setup.endTurn && $setup.endTurn.apply($setup, arguments);\n    }),\n    disabled: !$setup.canEndTurn\n  }, \" End Turn \", 8 /* PROPS */, _hoisted_7)])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementVNode","key","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","$setup","currentPlayerNickname","currentTurnNickname","gameData","_hoisted_3","_hoisted_4","_Fragment","_renderList","row","col","onClick","$event","selectCell","getMonsterAt","_hoisted_5","_hoisted_6","_cache","prepareAddMonster","id","endTurn","apply","arguments","disabled","canEndTurn","_hoisted_7","_createCommentVNode"],"sources":["F:\\CCT\\2 SEMESTER\\Concurrent_Systems\\CA2\\project-framework\\monster_mayhem\\src\\views\\Game.vue"],"sourcesContent":["<!---->\r\n\r\n\r\n<template>\r\n  <div class=\"game\">\r\n    <h1>Game</h1>\r\n    <p>Player: {{ currentPlayerNickname }}</p>\r\n    <p>Current Turn: {{ currentTurnNickname }}</p>\r\n    <div v-if=\"gameData\">\r\n      <div class=\"board\">\r\n        <div v-for=\"row in 10\" :key=\"row\" class=\"row\">\r\n          <div\r\n            v-for=\"col in 10\"\r\n            :key=\"col\"\r\n            class=\"cell\"\r\n            :data-row=\"row - 1\"\r\n            :data-col=\"col - 1\"\r\n            @click=\"selectCell(row - 1, col - 1)\"\r\n          >\r\n            {{ getMonsterAt(row - 1, col - 1) }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"controls\">\r\n        <button @click=\"prepareAddMonster('vampire')\">Add Vampire</button>\r\n        <button @click=\"prepareAddMonster('werewolf')\">Add Werewolf</button>\r\n        <button @click=\"prepareAddMonster('ghost')\">Add Ghost</button>\r\n        <button id=\"endTurnButton\" @click=\"endTurn\" :disabled=\"!canEndTurn\">\r\n          End Turn\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { useRoute } from \"vue-router\";\r\nimport { db } from \"../services/firebaseConfig\";\r\nimport { doc, getDoc, onSnapshot, updateDoc } from \"firebase/firestore\";\r\nimport { onAuthStateChanged } from \"firebase/auth\";\r\nimport { auth } from \"../services/firebaseConfig\";\r\n\r\nexport default {\r\n  name: \"Game\",\r\n  setup() {\r\n    const route = useRoute();\r\n    const gameId = ref(route.params.id);\r\n    const gameData = ref(null);\r\n    const currentPlayerNickname = ref(\"\");\r\n    const currentTurnNickname = ref(\"\");\r\n    const selectedMonsterType = ref(null);\r\n    const selectedMonster = ref(null);\r\n    const user = ref(null);\r\n    const canEndTurn = ref(false);\r\n    let addedMonster = false;\r\n    let movedMonster = false;\r\n\r\n    const playerColors = {\r\n      player1UID: \"green\",\r\n      player2UID: \"red\",\r\n      player3UID: \"blue\",\r\n      player4UID: \"yellow\",\r\n    };\r\n\r\n    // Load game data from Firestore\r\n    const loadGame = async () => {\r\n      const gameRef = doc(db, \"games\", gameId.value);\r\n      const gameSnap = await getDoc(gameRef);\r\n      if (gameSnap.exists()) {\r\n        gameData.value = gameSnap.data();\r\n        updateCurrentTurnNickname();\r\n      } else {\r\n        console.error(\"No such game!\");\r\n      }\r\n    };\r\n\r\n    // Update current turn nickname\r\n    const updateCurrentTurnNickname = async () => {\r\n      if (gameData.value && gameData.value.turn) {\r\n        currentTurnNickname.value = await getNicknameById(gameData.value.turn);\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      loadGame();\r\n      const gameRef = doc(db, \"games\", gameId.value);\r\n      onSnapshot(gameRef, (doc) => {\r\n        if (doc.exists()) {\r\n          gameData.value = doc.data();\r\n          console.log(\"Game Data:\", gameData.value);\r\n          console.log(\"Turn:\", gameData.value.turn);\r\n          updateCurrentTurnNickname();\r\n        }\r\n      });\r\n\r\n      onAuthStateChanged(auth, (currentUser) => {\r\n        if (currentUser) {\r\n          user.value = currentUser;\r\n          getNicknameById(currentUser.uid).then((nickname) => {\r\n            currentPlayerNickname.value = nickname;\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    // Get nickname by user ID\r\n    const getNicknameById = async (uid) => {\r\n      const userRef = doc(db, \"users\", uid);\r\n      const userSnap = await getDoc(userRef);\r\n      if (userSnap.exists()) {\r\n        return userSnap.data().nickname;\r\n      } else {\r\n        return \"Unknown\";\r\n      }\r\n    };\r\n\r\n    // Get the monster at a specific position\r\n    const getMonsterAt = (row, col) => {\r\n      if (!gameData.value) return \"\";\r\n      for (let player in gameData.value.state.playersData) {\r\n        const monsters = gameData.value.state.playersData[player].monsters;\r\n        for (let monster of monsters) {\r\n          if (monster.position[0] === row && monster.position[1] === col) {\r\n            return monster.type.charAt(0).toUpperCase(); // Display the initial of the monster\r\n          }\r\n        }\r\n      }\r\n      return \"\";\r\n    };\r\n\r\n    // Highlight permitted cells for the current player\r\n    const highlightPermittedCells = (cells) => {\r\n      cells.forEach(([row, col]) => {\r\n        document\r\n          .querySelector(`.cell[data-row='${row}'][data-col='${col}']`)\r\n          .classList.add(\"highlight\");\r\n      });\r\n    };\r\n\r\n    // Clear highlights from cells\r\n    const clearHighlights = () => {\r\n      document\r\n        .querySelectorAll(\".cell.highlight\")\r\n        .forEach((cell) => cell.classList.remove(\"highlight\"));\r\n    };\r\n\r\n    // Prepare to add a monster of a specific type\r\n    const prepareAddMonster = (monsterType) => {\r\n      selectedMonsterType.value = monsterType;\r\n      clearHighlights();\r\n      const permittedCells = getPermittedCells(gameData.value.turn);\r\n      console.log(\"Permitted Cells:\", permittedCells);\r\n      highlightPermittedCells(permittedCells);\r\n    };\r\n\r\n    // Get permitted cells for the current player\r\n    const getPermittedCells = (playerId) => {\r\n      console.log(\"Getting permitted cells for player:\", playerId);\r\n      let permittedCells = [];\r\n      const playerIndex = gameData.value.players.indexOf(playerId);\r\n\r\n      switch (playerIndex) {\r\n        case 0: // Player 1\r\n          permittedCells = Array.from({ length: 9 }, (_, i) => [i + 1, 0]);\r\n          break;\r\n        case 1: // Player 2\r\n          permittedCells = Array.from({ length: 9 }, (_, i) => [0, i]);\r\n          break;\r\n        case 2: // Player 3\r\n          permittedCells = Array.from({ length: 9 }, (_, i) => [i, 9]);\r\n          break;\r\n        case 3: // Player 4\r\n          permittedCells = Array.from({ length: 9 }, (_, i) => [9, i + 1]);\r\n          break;\r\n        default:\r\n          console.log(\"No matching player ID found.\");\r\n          return [];\r\n      }\r\n\r\n      console.log(`Permitted cells for player${playerIndex + 1}:`, permittedCells);\r\n      return permittedCells;\r\n    };\r\n\r\n    // Select a cell to place the monster or move the monster\r\n    const selectCell = async (row, col) => {\r\n      console.log(\"Selected cell:\", [row, col]);\r\n      if (selectedMonsterType.value) {\r\n        await addMonsterToCell(row, col);\r\n      } else if (selectedMonster.value) {\r\n        await moveMonsterToCell(row, col);\r\n      }\r\n    };\r\n\r\n    // Add monster to the selected cell\r\n    const addMonsterToCell = async (row, col) => {\r\n      if (!selectedMonsterType.value || !gameData.value) return;\r\n\r\n      const permittedCells = getPermittedCells(gameData.value.turn);\r\n      if (!permittedCells.some((cell) => cell[0] === row && cell[1] === col))\r\n        return; // Check if cell is permitted\r\n\r\n      console.log(\r\n        \"Adding monster to cell:\",\r\n        selectedMonsterType.value,\r\n        \"at position:\",\r\n        [row, col]\r\n      );\r\n\r\n      const newState = { ...gameData.value.state };\r\n      const currentPlayer = newState.turn;\r\n\r\n      if (!newState.playersData[currentPlayer]) {\r\n        console.error(\"Player data not found:\", currentPlayer);\r\n        return;\r\n      }\r\n\r\n      if (!newState.playersData[currentPlayer].monsters) {\r\n        newState.playersData[currentPlayer].monsters = [];\r\n      }\r\n\r\n      const playerMonsters = newState.playersData[currentPlayer].monsters;\r\n      console.log(\"Current player monsters before adding:\", playerMonsters);\r\n\r\n      playerMonsters.push({\r\n        type: selectedMonsterType.value,\r\n        position: [row, col],\r\n      });\r\n\r\n      console.log(\"Current player monsters after adding:\", playerMonsters);\r\n\r\n      try {\r\n        await updateDoc(doc(db, \"games\", gameId.value), { state: newState });\r\n        selectedMonsterType.value = null; // Reset selected monster type\r\n        addedMonster = true;\r\n        checkEndTurnAvailability();\r\n        clearHighlights();\r\n      } catch (error) {\r\n        console.error(\"Error updating document:\", error);\r\n      }\r\n    };\r\n\r\n    // Move monster to the selected cell\r\n    const moveMonsterToCell = async (row, col) => {\r\n      if (!selectedMonster.value || !gameData.value) return;\r\n\r\n      const newState = { ...gameData.value.state };\r\n      const currentPlayer = newState.turn;\r\n      const playerMonsters = newState.playersData[currentPlayer].monsters;\r\n\r\n      // Find the monster and update its position\r\n      const monster = playerMonsters.find(\r\n        (m) =>\r\n          m.position[0] === selectedMonster.value[0] &&\r\n          m.position[1] === selectedMonster.value[1]\r\n      );\r\n      if (monster) {\r\n        monster.position = [row, col];\r\n        await updateDoc(doc(db, \"games\", gameId.value), { state: newState });\r\n        movedMonster = true;\r\n        checkEndTurnAvailability();\r\n        clearHighlights();\r\n        selectedMonster.value = null; // Reset selected monster\r\n      }\r\n    };\r\n\r\n    // Check if the end turn button can be enabled\r\n    const checkEndTurnAvailability = () => {\r\n      canEndTurn.value = addedMonster && movedMonster;\r\n    };\r\n\r\n    // End the turn for the current player\r\n    const endTurn = async () => {\r\n      addedMonster = false;\r\n      movedMonster = false;\r\n      canEndTurn.value = false;\r\n\r\n      const newState = { ...gameData.value.state };\r\n      const currentPlayerIndex = gameData.value.players.indexOf(\r\n        gameData.value.turn\r\n      );\r\n      const nextPlayerIndex =\r\n        (currentPlayerIndex + 1) % gameData.value.players.length;\r\n      newState.turn = gameData.value.players[nextPlayerIndex];\r\n\r\n      await updateDoc(doc(db, \"games\", gameId.value), { state: newState });\r\n      updateCurrentTurnNickname();\r\n    };\r\n\r\n    return {\r\n      gameId,\r\n      gameData,\r\n      currentPlayerNickname,\r\n      currentTurnNickname,\r\n      playerColors,\r\n      getMonsterAt,\r\n      prepareAddMonster,\r\n      selectCell,\r\n      canEndTurn,\r\n      endTurn,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.game {\r\n  text-align: center;\r\n  margin-top: 50px;\r\n}\r\n.board {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 30px);\r\n  grid-template-rows: repeat(10, 30px);\r\n  gap: 1px;\r\n  margin: 20px auto;\r\n}\r\n.cell {\r\n  width: 30px;\r\n  height: 30px;\r\n  border: 1px solid #000;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.highlight {\r\n  background-color: yellow;\r\n}\r\n.controls {\r\n  margin-top: 20px;\r\n}\r\n.controls button {\r\n  margin: 0 5px;\r\n}\r\n</style>\r\n"],"mappings":";;;;;EAIO,SAAM;AAAM;;sBACfA,mBAAA,CAAa,YAAT,MAAI;AAAA;;EALZC,GAAA;AAAA;;EASW,SAAM;AAAO;iBATxB;;EAuBW,SAAM;AAAU;iBAvB3B;;uBAIEC,mBAAA,CA4BM,OA5BNC,UA4BM,GA3BJC,UAAa,EACbJ,mBAAA,CAA0C,WAAvC,UAAQ,GAAAK,gBAAA,CAAGC,MAAA,CAAAC,qBAAqB,kBACnCP,mBAAA,CAA8C,WAA3C,gBAAc,GAAAK,gBAAA,CAAGC,MAAA,CAAAE,mBAAmB,kBAC5BF,MAAA,CAAAG,QAAQ,I,cAAnBP,mBAAA,CAuBM,OA/BVQ,UAAA,GASMV,mBAAA,CAaM,OAbNW,UAaM,I,cAZJT,mBAAA,CAWMU,SAAA,QArBdC,WAAA,CAU2B,EAAE,EAV7B,UAUoBC,GAAG;WAAfd,mBAAA,CAWM;MAXkBC,GAAG,EAAEa,GAAG;MAAE,SAAM;uBACtCZ,mBAAA,CASMU,SAAA,QApBhBC,WAAA,CAY0B,EAAE,EAZ5B,UAYmBE,GAAG;aADZf,mBAAA,CASM;QAPHC,GAAG,EAAEc,GAAG;QACT,SAAM,MAAM;QACX,UAAQ,EAAED,GAAG;QACb,UAAQ,EAAEC,GAAG;QACbC,OAAK,WAAAA,QAAAC,MAAA;UAAA,OAAEX,MAAA,CAAAY,UAAU,CAACJ,GAAG,MAAMC,GAAG;QAAA;0BAE5BT,MAAA,CAAAa,YAAY,CAACL,GAAG,MAAMC,GAAG,6BAnBxCK,UAAA;;oCAuBMpB,mBAAA,CAOM,OAPNqB,UAOM,GANJrB,mBAAA,CAAkE;IAAzDgB,OAAK,EAAAM,MAAA,QAAAA,MAAA,gBAAAL,MAAA;MAAA,OAAEX,MAAA,CAAAiB,iBAAiB;IAAA;KAAa,aAAW,GACzDvB,mBAAA,CAAoE;IAA3DgB,OAAK,EAAAM,MAAA,QAAAA,MAAA,gBAAAL,MAAA;MAAA,OAAEX,MAAA,CAAAiB,iBAAiB;IAAA;KAAc,cAAY,GAC3DvB,mBAAA,CAA8D;IAArDgB,OAAK,EAAAM,MAAA,QAAAA,MAAA,gBAAAL,MAAA;MAAA,OAAEX,MAAA,CAAAiB,iBAAiB;IAAA;KAAW,WAAS,GACrDvB,mBAAA,CAES;IAFDwB,EAAE,EAAC,eAAe;IAAER,OAAK,EAAAM,MAAA,QAAAA,MAAA;MAAA,OAAEhB,MAAA,CAAAmB,OAAA,IAAAnB,MAAA,CAAAmB,OAAA,CAAAC,KAAA,CAAApB,MAAA,EAAAqB,SAAA,CAAO;IAAA;IAAGC,QAAQ,GAAGtB,MAAA,CAAAuB;KAAY,YAEpE,iBA7BRC,UAAA,E,OAAAC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}